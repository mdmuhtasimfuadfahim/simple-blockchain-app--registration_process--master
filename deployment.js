const Web3 = require('web3')
const rpcURL = "http://localhost:8000"
const web3 = new Web3(rpcURL)
var accounts = require('web3-eth-accounts')
const keythereum = require('keythereum')
var tx = require('ethereumjs-tx').Transaction
const contract = require('./app/models/contract')

var accountOneKey = process.env.Private_Key_Of_Account_One;
var abi = [
	{
		"inputs": [],
		"stateMutability": "nonpayable",
		"type": "constructor"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": false,
				"internalType": "string",
				"name": "name",
				"type": "string"
			},
			{
				"indexed": false,
				"internalType": "string",
				"name": "email",
				"type": "string"
			},
			{
				"indexed": false,
				"internalType": "string",
				"name": "uniId",
				"type": "string"
			},
			{
				"indexed": false,
				"internalType": "string",
				"name": "myAddress",
				"type": "string"
			},
			{
				"indexed": false,
				"internalType": "string",
				"name": "role",
				"type": "string"
			}
		],
		"name": "logFromSubmission",
		"type": "event"
	},
	{
		"inputs": [],
		"name": "admin",
		"outputs": [
			{
				"internalType": "address",
				"name": "",
				"type": "address"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "string",
				"name": "_uniId",
				"type": "string"
			}
		],
		"name": "getRegistrationInformation",
		"outputs": [
			{
				"internalType": "string",
				"name": "",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "",
				"type": "string"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "isAdmin_",
		"outputs": [
			{
				"internalType": "bool",
				"name": "",
				"type": "bool"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "notStudent_",
		"outputs": [
			{
				"internalType": "bool",
				"name": "",
				"type": "bool"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "string",
				"name": "_name",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "_email",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "_uniId",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "_myAddress",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "_role",
				"type": "string"
			}
		],
		"name": "storeRegistrationInformation",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "student",
		"outputs": [
			{
				"internalType": "address",
				"name": "",
				"type": "address"
			}
		],
		"stateMutability": "view",
		"type": "function"
	}
];

var bytecode = "0x" + "608060405234801561001057600080fd5b5033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610ebb806100616000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80632df94d0c1461006757806345503b1d1461009b578063699450e8146100b9578063c6475e9a146100d7578063e3481ace146100f5578063f851a44014610111575b600080fd5b610081600480360381019061007c919061092f565b61012f565b604051610092959493929190610b9a565b60405180910390f35b6100a36104ab565b6040516100b09190610b7f565b60405180910390f35b6100c1610503565b6040516100ce9190610b64565b60405180910390f35b6100df610529565b6040516100ec9190610b7f565b60405180910390f35b61010f600480360381019061010a9190610978565b610581565b005b6101196107f6565b6040516101269190610b64565b60405180910390f35b60608060608060606000866040516101479190610b4d565b90815260200160405180910390206000016000876040516101689190610b4d565b90815260200160405180910390206001016000886040516101899190610b4d565b90815260200160405180910390206002016000896040516101aa9190610b4d565b908152602001604051809103902060030160008a6040516101cb9190610b4d565b90815260200160405180910390206004018480546101e890610d4d565b80601f016020809104026020016040519081016040528092919081815260200182805461021490610d4d565b80156102615780601f1061023657610100808354040283529160200191610261565b820191906000526020600020905b81548152906001019060200180831161024457829003601f168201915b5050505050945083805461027490610d4d565b80601f01602080910402602001604051908101604052809291908181526020018280546102a090610d4d565b80156102ed5780601f106102c2576101008083540402835291602001916102ed565b820191906000526020600020905b8154815290600101906020018083116102d057829003601f168201915b5050505050935082805461030090610d4d565b80601f016020809104026020016040519081016040528092919081815260200182805461032c90610d4d565b80156103795780601f1061034e57610100808354040283529160200191610379565b820191906000526020600020905b81548152906001019060200180831161035c57829003601f168201915b5050505050925081805461038c90610d4d565b80601f01602080910402602001604051908101604052809291908181526020018280546103b890610d4d565b80156104055780601f106103da57610100808354040283529160200191610405565b820191906000526020600020905b8154815290600101906020018083116103e857829003601f168201915b5050505050915080805461041890610d4d565b80601f016020809104026020016040519081016040528092919081815260200182805461044490610d4d565b80156104915780601f1061046657610100808354040283529160200191610491565b820191906000526020600020905b81548152906001019060200180831161047457829003601f168201915b505050505090509450945094509450945091939590929450565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614905090565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614905090565b3373ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610611576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060890610c30565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156106a2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161069990610c10565b60405180910390fd5b846000846040516106b39190610b4d565b908152602001604051809103902060000190805190602001906106d792919061081c565b50836000846040516106e99190610b4d565b9081526020016040518091039020600101908051906020019061070d92919061081c565b508260008460405161071f9190610b4d565b9081526020016040518091039020600201908051906020019061074392919061081c565b50816000846040516107559190610b4d565b9081526020016040518091039020600301908051906020019061077992919061081c565b508060008460405161078b9190610b4d565b908152602001604051809103902060040190805190602001906107af92919061081c565b507f44982a5e5471868d0cfb2b776d005e415d0a9669720853db6402526e4a77130c85858585856040516107e7959493929190610b9a565b60405180910390a15050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b82805461082890610d4d565b90600052602060002090601f01602090048101928261084a5760008555610891565b82601f1061086357805160ff1916838001178555610891565b82800160010185558215610891579182015b82811115610890578251825591602001919060010190610875565b5b50905061089e91906108a2565b5090565b5b808211156108bb5760008160009055506001016108a3565b5090565b60006108d26108cd84610c75565b610c50565b9050828152602081018484840111156108ee576108ed610e13565b5b6108f9848285610d0b565b509392505050565b600082601f83011261091657610915610e0e565b5b81356109268482602086016108bf565b91505092915050565b60006020828403121561094557610944610e1d565b5b600082013567ffffffffffffffff81111561096357610962610e18565b5b61096f84828501610901565b91505092915050565b600080600080600060a0868803121561099457610993610e1d565b5b600086013567ffffffffffffffff8111156109b2576109b1610e18565b5b6109be88828901610901565b955050602086013567ffffffffffffffff8111156109df576109de610e18565b5b6109eb88828901610901565b945050604086013567ffffffffffffffff811115610a0c57610a0b610e18565b5b610a1888828901610901565b935050606086013567ffffffffffffffff811115610a3957610a38610e18565b5b610a4588828901610901565b925050608086013567ffffffffffffffff811115610a6657610a65610e18565b5b610a7288828901610901565b9150509295509295909350565b610a8881610ccd565b82525050565b610a9781610cdf565b82525050565b6000610aa882610ca6565b610ab28185610cb1565b9350610ac2818560208601610d1a565b610acb81610e22565b840191505092915050565b6000610ae182610ca6565b610aeb8185610cc2565b9350610afb818560208601610d1a565b80840191505092915050565b6000610b14600e83610cb1565b9150610b1f82610e33565b602082019050919050565b6000610b37601983610cb1565b9150610b4282610e5c565b602082019050919050565b6000610b598284610ad6565b915081905092915050565b6000602082019050610b796000830184610a7f565b92915050565b6000602082019050610b946000830184610a8e565b92915050565b600060a0820190508181036000830152610bb48188610a9d565b90508181036020830152610bc88187610a9d565b90508181036040830152610bdc8186610a9d565b90508181036060830152610bf08185610a9d565b90508181036080830152610c048184610a9d565b90509695505050505050565b60006020820190508181036000830152610c2981610b07565b9050919050565b60006020820190508181036000830152610c4981610b2a565b9050919050565b6000610c5a610c6b565b9050610c668282610d7f565b919050565b6000604051905090565b600067ffffffffffffffff821115610c9057610c8f610ddf565b5b610c9982610e22565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b6000610cd882610ceb565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b82818337600083830152505050565b60005b83811015610d38578082015181840152602081019050610d1d565b83811115610d47576000848401525b50505050565b60006002820490506001821680610d6557607f821691505b60208210811415610d7957610d78610db0565b5b50919050565b610d8882610e22565b810181811067ffffffffffffffff82111715610da757610da6610ddf565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4920616d20612073747564656e74000000000000000000000000000000000000600082015250565b7f596f752063616e6e6f7420646f207472616e73616369746f6e0000000000000060008201525056fea26469706673582212209d551074f9e0e878507d4350341f5e0cd466207cb42b6a63aec3de4324ef5bc664736f6c63430008070033";


function deployment(){
    web3.eth.getAccounts().then(async function (accounts){
        var myContract = new web3.eth.Contract(abi)
        var deployData = await myContract.deploy({
            data: bytecode
        }).encodeABI();

        const tx = {
            chainId: 54673,
            data: deployData,
            gas: 8000000
        }

        var BaseAccount = keythereum.recover(`${process.env.Account_One_Password}`, keythereum.importFromFile(accounts[0], './blockchain/data/')).toString('hex');

        web3.eth.accounts.signTransaction(tx, "0x" + accountOneKey).then(signed =>{
            web3.eth.sendSignedTransaction(signed.rawTransaction).on('receipt', async function(response){
                const contractSave = new contract({
                    blockHash: response.blockHash,
					blockNumber: response.blockNumber,
					contractAddress: response.contractAddress,
					cumulativeGasUsed: response.cumulativeGasUsed,
					from: response.from,
					gasUsed: response.gasUsed,
					logsBloom: response.logsBloom,
					status: response.status,
					to: response.to,
					transactionHash: response.transactionHash,
					transactionIndex: response.transactionIndex,
					type: response.type
                })

                const contractSaveInfo = await contractSave.save();
                console.log(contractSaveInfo)

                // console.log(response)
            })
        })
    })
}

module.exports = deployment